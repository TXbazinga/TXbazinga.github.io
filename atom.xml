<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TangXu&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-15T03:36:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tang Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React生命周期</title>
    <link href="http://yoursite.com/2017/03/15/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/03/15/React生命周期/</id>
    <published>2017-03-15T03:11:19.000Z</published>
    <updated>2017-03-15T03:36:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React组件的生命周期"><a href="#React组件的生命周期" class="headerlink" title="React组件的生命周期"></a>React组件的生命周期</h2><h3 id="创建期-五个阶段"><a href="#创建期-五个阶段" class="headerlink" title="创建期(五个阶段)"></a>创建期(五个阶段)</h3><p>1.<code>getDefaultProps</code>(获取默认属性)</p>
<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>
<p>2.<code>getInitialState</code> (获取默认状态)</p>
<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>
<p>3.<code>componentWillMount</code> (组件将要构建)</p>
<p>在完成首次渲染之前调用，此时仍可以修改组件的state。<br><a id="more"></a><br>4.<code>render</code> (组件渲染输出虚拟dom)</p>
<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则: 只能通过this.props和this.state访问数据 可以返回null、false或任何React组件 只能出现一个顶级组件（不能返回数组） 不能改变组件的状态 * 不能修改DOM的输出</p>
<p>5.<code>componentDidMount</code>(组件渲染完成)</p>
<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()(也可以ReactDOM.findDOMNode(this))访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。（在服务端中，该方法不会被调用）</p>
<h3 id="存在期-五个阶段"><a href="#存在期-五个阶段" class="headerlink" title="存在期 (五个阶段)"></a>存在期 (五个阶段)</h3><p>1.<code>componentWillReceiveProps</code>(接受新的属性)</p>
<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。</p>
<pre><code>componentWillReceiveProps: function(nextProps) { 
       if (nextProps.bool) { 
                 this.setState({ bool: true }); 
       }
}
</code></pre><p>2.<code>shouldComponentUpdate</code>(组建是否应该更新)</p>
<p>**必须有返回值(return false/true)</p>
<p>第一个参数是新属性</p>
<p>第二个参数是新状态</p>
<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>
<p>3.<code>componentWillUpdate</code> (组件将要被更新)</p>
<p>第一个参数是新属性<br>第二个参数是新状态</p>
<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>
<p>4.<code>render</code>(组件更新输出dom)</p>
<p>没有参数 这个阶段访问的都是旧的虚拟dom 只有之后的一个阶段访问的才是新的虚拟dom</p>
<p>5.<code>componentDidUpdate</code>(组件更新完成)</p>
<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>
<h3 id="销毁期-componentWillUnmount"><a href="#销毁期-componentWillUnmount" class="headerlink" title="销毁期 componentWillUnmount"></a>销毁期 <code>componentWillUnmount</code></h3><p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React组件的生命周期&quot;&gt;&lt;a href=&quot;#React组件的生命周期&quot; class=&quot;headerlink&quot; title=&quot;React组件的生命周期&quot;&gt;&lt;/a&gt;React组件的生命周期&lt;/h2&gt;&lt;h3 id=&quot;创建期-五个阶段&quot;&gt;&lt;a href=&quot;#创建期-五个阶段&quot; class=&quot;headerlink&quot; title=&quot;创建期(五个阶段)&quot;&gt;&lt;/a&gt;创建期(五个阶段)&lt;/h3&gt;&lt;p&gt;1.&lt;code&gt;getDefaultProps&lt;/code&gt;(获取默认属性)&lt;/p&gt;
&lt;p&gt;作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;getInitialState&lt;/code&gt; (获取默认状态)&lt;/p&gt;
&lt;p&gt;作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。&lt;/p&gt;
&lt;p&gt;3.&lt;code&gt;componentWillMount&lt;/code&gt; (组件将要构建)&lt;/p&gt;
&lt;p&gt;在完成首次渲染之前调用，此时仍可以修改组件的state。&lt;br&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>webpack15个知识点!</title>
    <link href="http://yoursite.com/2017/03/13/webpack/"/>
    <id>http://yoursite.com/2017/03/13/webpack/</id>
    <published>2017-03-13T09:15:26.000Z</published>
    <updated>2017-03-14T07:07:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、模块化系统演进："><a href="#一、模块化系统演进：" class="headerlink" title="一、模块化系统演进："></a>一、模块化系统演进：</h3><h4 id="1、传统："><a href="#1、传统：" class="headerlink" title="1、传统："></a>1、传统：</h4><pre><code>&lt;script src=“module.js”&gt;标签；
</code></pre><h4 id="2、commonJS："><a href="#2、commonJS：" class="headerlink" title="2、commonJS："></a>2、commonJS：</h4><p>协同require（）同步加载，再通过exports或module.exports来导出需要暴露的接口；不能加载多个模块；不适合浏览器加载。</p>
<h4 id="3、AMD"><a href="#3、AMD" class="headerlink" title="3、AMD:"></a>3、AMD:</h4><p>异步require，通过接口define（） 异步加载；可并行加载多个模块；适合浏览器。<br><a id="more"></a></p>
<h4 id="4、CMD"><a href="#4、CMD" class="headerlink" title="4、CMD:"></a>4、CMD:</h4><p>类似AMD；</p>
<h4 id="5、UMD"><a href="#5、UMD" class="headerlink" title="5、UMD:"></a>5、UMD:</h4><p>是模块跨平台解决方案；</p>
<h4 id="6、ES6"><a href="#6、ES6" class="headerlink" title="6、ES6:"></a>6、ES6:</h4><p>尽量静态化；编译时就能确定模块的依赖关系及输入输出变量；CommonJs和AMD都只能在运行时确定这些东西。<br>优点：静态分析，提前编译；面向未来的标准；<br>缺点：<br>1、浏览器原生兼容性差，所以一般都编译成ES5。<br>2、目前可以拿来即用的模块少，生态差。</p>
<h4 id="7、期望的模块："><a href="#7、期望的模块：" class="headerlink" title="7、期望的模块："></a>7、期望的模块：</h4><p>可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅只是 JavaScript 模块化，还有 CSS、图片、字体等资源也需要模块化。</p>
<h3 id="二、gulp-amp-webpack区别："><a href="#二、gulp-amp-webpack区别：" class="headerlink" title="二、gulp&amp;webpack区别："></a>二、gulp&amp;webpack区别：</h3><p>gulp是基于流的构建工具：all in one的打包模式，输出一个js文件和一个css文件，优点是减少http请求，万金油方案。<br>webpack是模块化管理工具，使用webpack可以对模块进行压缩、预处理、打包、按需加载等。</p>
<h3 id="三、webpack概念："><a href="#三、webpack概念：" class="headerlink" title="三、webpack概念："></a>三、webpack概念：</h3><p>webpack是模块化管理工具，使用webpack可以对模块进行压缩、预处理、按需打包、按需加载等。</p>
<h3 id="四、webpack9个特征："><a href="#四、webpack9个特征：" class="headerlink" title="四、webpack9个特征："></a>四、webpack9个特征：</h3><p>（1）插件化：webpack本身非常灵活，提供了丰富的插件接口。基于这些接口，webpack开发了很多插件作为内置功能。<br>（2）速度快：webpack使用异步IO以及多级缓存机制。所以webpack的速度是很快的，尤其是增量更新。<br>（3）丰富的Loaders：loaders用来对文件做预处理。这样webpack就可以打包任何静态文件。<br>（4）高适配性：webpack同时支持AMD/CommonJs/ES6模块方案。webpack会静态解析你的代码，自动帮你管理他们的依赖关系。此外，webpack对第三方库的兼容性很好。<br>（5）代码拆分：webpack可以将你的代码分片，从而实现按需打包。这种机制可以保证页面只加载需要的JS代码，减少首次请求的时间。<br>（6）优化：webpack提供了很多优化机制来减少打包输出的文件大小，不仅如此，它还提供了hash机制，来解决浏览器缓存问题。<br>（7）开发模式友好：webpack为开发模式也提供了很多辅助功能。比如SourceMap、热更新等。<br>（8）使用场景多：webpack不仅适用于web应用场景，也适用于Webworkers、Node.js场景。<br>（9）优点：webpack并不强制你使用某种模块化方案，而是通过兼容所有模块化方案让你无痛接入项目，当然这也是webpack牛逼的地方。<br>有了webpack，你可以随意选择你喜欢的模块化方案，至于怎么处理模块之间的依赖关系及如何按需打包，放轻松，webpack会帮你处理好的。</p>
<h3 id="五、webpack配置及参数解析："><a href="#五、webpack配置及参数解析：" class="headerlink" title="五、webpack配置及参数解析："></a>五、webpack配置及参数解析：</h3><p>1、两份配置文件webpack.config.production.js/webpack.config.development.js，然后不同场景下，使用不同的配置文件。<br>2、通过module.exports返回函数，该函数能接受参数。<br>相对来说，第一种更简单，但是重复配置多；第二种更灵活，推荐第二种方式。</p>
<h4 id="webpack-如何最佳配置？"><a href="#webpack-如何最佳配置？" class="headerlink" title="webpack 如何最佳配置？"></a>webpack 如何最佳配置？</h4><p>webpack官方提供的配置方法是通过module.exports返回一个json，但是这种场景不灵活，不能适配多种场景。比如要解决：production模式和development模式，webpack的配置是有差异的，大致有两种思路。<br>1、两份配置文件webpack.config.production.js/webpack.config.development.js<br>，然后不同场景下，使用不同的配置文件。<br>2、通过module.exports返回函数，该函数能接受参数。<br>相对来说，第一种更简单，但是重复配置多；第二种更灵活，推荐第二种方式。那么，按返回函数的方式的配置代码架子如下：</p>
<pre><code>module.exports = function(env) {
return { context: config.context,
entry: config.src, output: { path: path.join(config.jsDest, project),
filename: &apos;[name].js&apos;,
chunkFilename: &apos;[name].[chunkhash:8].js&apos;, publicPath: &apos;/assets/&apos; + project + &apos;/&apos;
},
devtool: &quot;eval&quot;, watch: false, profile: true, cache: true, module: {
loaders: getLoaders(env)
},
resolve: {
alias: getAlias(env)
},
plugins: getPlugins(env)
};
}
</code></pre><h4 id="其中关键的配置这儿简单介绍如下："><a href="#其中关键的配置这儿简单介绍如下：" class="headerlink" title="其中关键的配置这儿简单介绍如下："></a>其中关键的配置这儿简单介绍如下：</h4><p>context：上下文。<br>entry：入口文件，是所有依赖关系的入口，webpack从这个入口开始静态解析，分析模块之间的依赖关系。<br>output：打包输出的配置。<br>devtools：SourceMap选项，便于开发模式下调试。<br>watch：监听模式，增量更新，开发必备！<br>profile：优化。<br>cache：webpack构建的过程中会生成很多临时的文件，打开cache可以让这些临时的文件缓存起来，从而更快的构建。<br>module.loaders：如前文介绍，loaders用来对文件做预处理。这样webpack就可以打包任何静态文件。<br>resolve.alias：模块别名，这样可以更方便的引用模块。<br>plugins：如前文介绍，webpack的一些内置功能均是以插件的形式提供。</p>
<h3 id="六、webpack样式："><a href="#六、webpack样式：" class="headerlink" title="六、webpack样式："></a>六、webpack样式：</h3><p>内嵌css（不推荐）、独立的css、公共的css样式；</p>
<h3 id="七、模块化机制特点："><a href="#七、模块化机制特点：" class="headerlink" title="七、模块化机制特点："></a>七、模块化机制特点：</h3><p>1、可以兼容多模块风格，无痛迁移老项目。<br>2、一切皆模块，js/css/图片/字体都是模块。<br>3、静态解析（确定依赖关系，输入输出的变量），按需打包，动态加载。（webpack最优秀的地方）；<br>webpack提供的loaders可以对文件做预处理，从而实现了一切皆模块。</p>
<h3 id="八、webpack对模块做了什么？"><a href="#八、webpack对模块做了什么？" class="headerlink" title="八、webpack对模块做了什么？"></a>八、webpack对模块做了什么？</h3><p>（1）非模块化代码；（2）Runtime &amp; 模块；（3）AMD模块；（4）CommonJs；</p>
<h3 id="九、代码分块：chunk–程序块；"><a href="#九、代码分块：chunk–程序块；" class="headerlink" title="九、代码分块：chunk–程序块；"></a>九、代码分块：chunk–程序块；</h3><p>（1）CommonJs require.ensure(dependencies, callback)；<br>（2）AMD require(dependencies, callback)</p>
<h3 id="十、分块类型："><a href="#十、分块类型：" class="headerlink" title="十、分块类型："></a>十、分块类型：</h3><p>（1）入口块 entry chunk；（2）普通块 normal chunk；<br>（3）初始块 initial chunk；（4）多入口块；</p>
<h3 id="十一、gulp-amp-webpack整合："><a href="#十一、gulp-amp-webpack整合：" class="headerlink" title="十一、gulp&amp;webpack整合："></a>十一、gulp&amp;webpack整合：</h3><h4 id="1、目的："><a href="#1、目的：" class="headerlink" title="1、目的："></a>1、目的：</h4><p>前端工程化；更好的管理前端代码；</p>
<h4 id="2、怎么管理："><a href="#2、怎么管理：" class="headerlink" title="2、怎么管理："></a>2、怎么管理：</h4><p>gulp：处理html压缩/预处理/条件编译，图片压缩，精灵图自动合并等任务；<br>webpack：管理模块化，构建js/css。</p>
<h4 id="3、怎么整合："><a href="#3、怎么整合：" class="headerlink" title="3、怎么整合："></a>3、怎么整合：</h4><p>（1）webpack-stream方案[不推荐]；<br>（2）webpack原生方案；</p>
<h3 id="十二、怎么组织代码："><a href="#十二、怎么组织代码：" class="headerlink" title="十二、怎么组织代码："></a>十二、怎么组织代码：</h3><p>gulp那一套、webpack原生方案；</p>
<h3 id="十三、特别强调–webpack最优秀的地方："><a href="#十三、特别强调–webpack最优秀的地方：" class="headerlink" title="十三、特别强调–webpack最优秀的地方："></a>十三、特别强调–webpack最优秀的地方：</h3><p>预处理；按需加载；</p>
<p>webpack提供的require（）方法和require.ensure（）方法来实现，即AMD和commonJS规范；</p>
<h3 id="十四、按需加载的时间戳："><a href="#十四、按需加载的时间戳：" class="headerlink" title="十四、按需加载的时间戳："></a>十四、按需加载的时间戳：</h3><p>rake任务；</p>
<p>###十五、常用插件：<br>1、解析压缩美化chunk：UglifyJsPlugin new webpack.optimize.UglifyJsPlugin([options])；<br>2、分离css文件；ExtractTextPlugin var ExtractTextPlugin = require(“extract-text-webpack-plugin”);<br>3、删除重复依赖；DedupePlugin new webpack.optimize.DedupePlugin()；<br>4、跳过编译出错并记录；NoErrorsPlugin new webpack.NoErrorsPlugin()；<br>5、提取公共模块；CommonsChunkPlugin new webpack.optimize.CommonsChunkPlugin(options)；</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、模块化系统演进：&quot;&gt;&lt;a href=&quot;#一、模块化系统演进：&quot; class=&quot;headerlink&quot; title=&quot;一、模块化系统演进：&quot;&gt;&lt;/a&gt;一、模块化系统演进：&lt;/h3&gt;&lt;h4 id=&quot;1、传统：&quot;&gt;&lt;a href=&quot;#1、传统：&quot; class=&quot;headerlink&quot; title=&quot;1、传统：&quot;&gt;&lt;/a&gt;1、传统：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;script src=“module.js”&amp;gt;标签；
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2、commonJS：&quot;&gt;&lt;a href=&quot;#2、commonJS：&quot; class=&quot;headerlink&quot; title=&quot;2、commonJS：&quot;&gt;&lt;/a&gt;2、commonJS：&lt;/h4&gt;&lt;p&gt;协同require（）同步加载，再通过exports或module.exports来导出需要暴露的接口；不能加载多个模块；不适合浏览器加载。&lt;/p&gt;
&lt;h4 id=&quot;3、AMD&quot;&gt;&lt;a href=&quot;#3、AMD&quot; class=&quot;headerlink&quot; title=&quot;3、AMD:&quot;&gt;&lt;/a&gt;3、AMD:&lt;/h4&gt;&lt;p&gt;异步require，通过接口define（） 异步加载；可并行加载多个模块；适合浏览器。&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
</feed>
